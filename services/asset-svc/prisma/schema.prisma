generator client {
  provider      = "prisma-client-js"
  output        = "../generated/client"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum AssetStatus {
  available
  assigned
  maintenance
  retired
}

model AssetType {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())

  assets Asset[]

  @@map("AssetType")
}

model Asset {
  id          String      @id @default(uuid())
  assetId     String      @unique // Renamed from assetTag (e.g., LAP-2024-001)
  type        String              // Direct type string (e.g., "Laptop")
  description String              // Renamed from summary - more detailed
  
  // Mandatory field
  fundingDepartment String
  
  // Hardware details
  manufacturer      String?
  model             String?
  modelGeneration   String?
  serialNumber      String?  @unique
  vendor            String?
  
  // Technical specifications
  memory         String?
  hddSize        String?
  hddType        String?
  cpuGeneration  String?
  cpuSpeed       String?
  gpuModel       String?
  videoCard      String?
  
  // Network specifications
  wiredMac       String?
  wirelessMac    String?
  
  // Display outputs
  output1        String?
  output2        String?
  
  // Procurement information
  receivedDate   DateTime?
  cost           Float?
  po             String?        // Purchase order number
  
  // Disposal information
  disposalDate   DateTime?
  disposalType   String?
  
  // Location and status
  location       String?
  status         AssetStatus @default(available)
  
  // Assignment tracking (flattened from AssetAssignment)
  assignedToId   String?       // User ID
  assignedDate   DateTime?
  
  // Timestamps
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // Relations kept for backward compatibility
  assetTypeId    String?    // Made optional for transition
  assetType      AssetType?         @relation(fields: [assetTypeId], references: [id])
  assignments    AssetAssignment[]
  lifecycle      LifecycleEvent[]

  @@index([status])
  @@index([assetTypeId])
  @@index([assignedToId])
  @@index([type])
  @@map("Asset")
}

model AssetAssignment {
  id           String    @id @default(uuid())
  assetId      String
  personId     String    // user ID
  assignedAt   DateTime  @default(now())
  unassignedAt DateTime?

  asset Asset @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@index([assetId, unassignedAt])
  @@index([personId])
  @@map("AssetAssignment")
}

model LifecycleEvent {
  id         String   @id @default(uuid())
  assetId    String
  action     String   // created, updated, assigned, unassigned, maintenance, retired
  actorId    String?
  metadata   Json?
  occurredAt DateTime @default(now())

  asset Asset @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@index([assetId, occurredAt])
  @@map("LifecycleEvent")
}

// Append-only audit log
model AuditLog {
  id       String   @id @default(uuid())
  entity   String
  entityId String
  action   String
  actorId  String?
  at       DateTime @default(now())
  metadata Json?

  @@index([entity, entityId, at])
  @@map("AuditLog")
}
