generator client {
  provider        = "prisma-client-js"
  output          = "../generated/client"
  binaryTargets   = ["native", "debian-openssl-3.0.x", "linux-arm64-openssl-3.0.x"]
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  schemas           = ["reservation"]
}

enum ReservationStatus {
  pending
  approved
  denied
  active      // Approved and currently in use
  returned
  cancelled

  @@schema("reservation")
}

model Reservation {
  id               String            @id @default(uuid())
  reservationNumber String           @unique // NEW: RES-YYYY-NNN format
  requesterId      String            // User ID who requested
  requesterEmail   String?           // Email for tracking
  requesterName    String?
  
  // Simplified: Single equipment type and quantity (no items array)
  equipmentType    String            // NEW: Direct field instead of items
  quantity         Int               @default(1) // NEW: Direct field
  purpose          String?           // NEW: Purpose of reservation
  
  status           ReservationStatus @default(pending)
  requestDate      DateTime          // Renamed from requestedDate
  returnDate       DateTime          // Expected return date
  actualReturnDate DateTime?         // Actual return date
  
  // Approval/Denial
  approvedDate     DateTime?         // When approved
  approvedBy       String?           // Operator/Admin user ID
  deniedBy         String?           // Operator/Admin user ID
  denialReason     String?
  
  // Cancellation tracking
  cancelledAt      DateTime?         // NEW: When cancelled
  cancellationReason String?         // NEW: Why cancelled
  
  // Assets assigned (comma-separated IDs for simplicity)
  assignedAssetIds String?           // NEW: Comma-separated asset IDs
  
  notes            String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@index([requesterId])
  @@index([status, createdAt])
  @@index([reservationNumber])
  @@map("Reservation")
  @@schema("reservation")
}

// Snapshot of equipment availability (for quick lookups)
model EquipmentAvailability {
  id            String   @id @default(uuid())
  assetTypeId   String   @unique
  assetTypeName String   @unique
  totalCount    Int      @default(0)
  assignedCount Int      @default(0)
  reservedCount Int      @default(0)
  availableCount Int     @default(0)
  updatedAt     DateTime @updatedAt

  @@map("EquipmentAvailability")
  @@schema("reservation")
}

// Audit log for reservation service
model AuditLog {
  id       String   @id @default(uuid())
  entity   String
  entityId String
  action   String
  actorId  String?
  at       DateTime @default(now())
  metadata Json?

  @@index([entity, entityId, at])
  @@map("AuditLog")
  @@schema("reservation")
}

