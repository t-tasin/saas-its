name: Deploy to Production GKE

on:
  push:
    branches: [main]
    paths:
      - 'services/**'
      - 'deploy/**'
      - '.github/workflows/deploy-production.yaml'
  workflow_dispatch:
    inputs:
      service:
        description: 'Service to deploy (all, identity, ticket, asset, reservation)'
        required: false
        default: 'all'

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: saas-its-prod
  GKE_REGION: us-central1
  NAMESPACE: saas-its-prod

jobs:
  build-and-deploy:
    name: Build and Deploy Services
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.GCP_PROJECT_ID }}
          export_default_credentials: true
      
      - name: Configure Docker for GCR
        run: |
          gcloud auth configure-docker
      
      - name: Set image tag
        id: vars
        run: |
          echo "IMAGE_TAG=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT
          echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
      
      # Build Identity Service
      - name: Build and Push Identity Service
        if: github.event.inputs.service == 'all' || github.event.inputs.service == 'identity' || github.event.inputs.service == ''
        run: |
          cd services/identity-svc
          docker build \
            --build-arg BUILD_DATE=${{ steps.vars.outputs.BUILD_DATE }} \
            --build-arg VCS_REF=${{ github.sha }} \
            -t gcr.io/${{ env.GCP_PROJECT_ID }}/identity-svc:${{ steps.vars.outputs.IMAGE_TAG }} \
            -t gcr.io/${{ env.GCP_PROJECT_ID }}/identity-svc:latest \
            .
          docker push gcr.io/${{ env.GCP_PROJECT_ID }}/identity-svc:${{ steps.vars.outputs.IMAGE_TAG }}
          docker push gcr.io/${{ env.GCP_PROJECT_ID }}/identity-svc:latest
      
      # Build Ticket Service
      - name: Build and Push Ticket Service
        if: github.event.inputs.service == 'all' || github.event.inputs.service == 'ticket' || github.event.inputs.service == ''
        run: |
          cd services/ticket-svc
          docker build \
            --build-arg BUILD_DATE=${{ steps.vars.outputs.BUILD_DATE }} \
            --build-arg VCS_REF=${{ github.sha }} \
            -t gcr.io/${{ env.GCP_PROJECT_ID }}/ticket-svc:${{ steps.vars.outputs.IMAGE_TAG }} \
            -t gcr.io/${{ env.GCP_PROJECT_ID }}/ticket-svc:latest \
            .
          docker push gcr.io/${{ env.GCP_PROJECT_ID }}/ticket-svc:${{ steps.vars.outputs.IMAGE_TAG }}
          docker push gcr.io/${{ env.GCP_PROJECT_ID }}/ticket-svc:latest
      
      # Build Asset Service
      - name: Build and Push Asset Service
        if: github.event.inputs.service == 'all' || github.event.inputs.service == 'asset' || github.event.inputs.service == ''
        run: |
          cd services/asset-svc
          docker build \
            --build-arg BUILD_DATE=${{ steps.vars.outputs.BUILD_DATE }} \
            --build-arg VCS_REF=${{ github.sha }} \
            -t gcr.io/${{ env.GCP_PROJECT_ID }}/asset-svc:${{ steps.vars.outputs.IMAGE_TAG }} \
            -t gcr.io/${{ env.GCP_PROJECT_ID }}/asset-svc:latest \
            .
          docker push gcr.io/${{ env.GCP_PROJECT_ID }}/asset-svc:${{ steps.vars.outputs.IMAGE_TAG }}
          docker push gcr.io/${{ env.GCP_PROJECT_ID }}/asset-svc:latest
      
      # Build Reservation Service
      - name: Build and Push Reservation Service
        if: github.event.inputs.service == 'all' || github.event.inputs.service == 'reservation' || github.event.inputs.service == ''
        run: |
          cd services/reservation-svc
          docker build \
            --build-arg BUILD_DATE=${{ steps.vars.outputs.BUILD_DATE }} \
            --build-arg VCS_REF=${{ github.sha }} \
            -t gcr.io/${{ env.GCP_PROJECT_ID }}/reservation-svc:${{ steps.vars.outputs.IMAGE_TAG }} \
            -t gcr.io/${{ env.GCP_PROJECT_ID }}/reservation-svc:latest \
            .
          docker push gcr.io/${{ env.GCP_PROJECT_ID }}/reservation-svc:${{ steps.vars.outputs.IMAGE_TAG }}
          docker push gcr.io/${{ env.GCP_PROJECT_ID }}/reservation-svc:latest
      
      # Get GKE credentials
      - name: Get GKE Credentials
        run: |
          gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} --region ${{ env.GKE_REGION }}
      
      # Install Helm
      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'
      
      # Deploy Identity Service
      - name: Deploy Identity Service
        if: github.event.inputs.service == 'all' || github.event.inputs.service == 'identity' || github.event.inputs.service == ''
        run: |
          helm upgrade --install identity-svc ./deploy/charts/identity-svc \
            -f ./deploy/charts/identity-svc/values-prod.yaml \
            --set image.repository=gcr.io/${{ env.GCP_PROJECT_ID }}/identity-svc \
            --set image.tag=${{ steps.vars.outputs.IMAGE_TAG }} \
            -n ${{ env.NAMESPACE }} \
            --create-namespace \
            --wait \
            --timeout 5m
      
      # Deploy Ticket Service
      - name: Deploy Ticket Service
        if: github.event.inputs.service == 'all' || github.event.inputs.service == 'ticket' || github.event.inputs.service == ''
        run: |
          helm upgrade --install ticket-svc ./deploy/charts/ticket-svc \
            -f ./deploy/charts/ticket-svc/values-prod.yaml \
            --set image.repository=gcr.io/${{ env.GCP_PROJECT_ID }}/ticket-svc \
            --set image.tag=${{ steps.vars.outputs.IMAGE_TAG }} \
            -n ${{ env.NAMESPACE }} \
            --create-namespace \
            --wait \
            --timeout 5m
      
      # Deploy Asset Service
      - name: Deploy Asset Service
        if: github.event.inputs.service == 'all' || github.event.inputs.service == 'asset' || github.event.inputs.service == ''
        run: |
          helm upgrade --install asset-svc ./deploy/charts/asset-svc \
            -f ./deploy/charts/asset-svc/values-prod.yaml \
            --set image.repository=gcr.io/${{ env.GCP_PROJECT_ID }}/asset-svc \
            --set image.tag=${{ steps.vars.outputs.IMAGE_TAG }} \
            -n ${{ env.NAMESPACE }} \
            --create-namespace \
            --wait \
            --timeout 5m
      
      # Deploy Reservation Service
      - name: Deploy Reservation Service
        if: github.event.inputs.service == 'all' || github.event.inputs.service == 'reservation' || github.event.inputs.service == ''
        run: |
          helm upgrade --install reservation-svc ./deploy/charts/reservation-svc \
            -f ./deploy/charts/reservation-svc/values-prod.yaml \
            --set image.repository=gcr.io/${{ env.GCP_PROJECT_ID }}/reservation-svc \
            --set image.tag=${{ steps.vars.outputs.IMAGE_TAG }} \
            -n ${{ env.NAMESPACE }} \
            --create-namespace \
            --wait \
            --timeout 5m
      
      # Verify Deployments
      - name: Verify Deployments
        run: |
          echo "Checking deployment status..."
          kubectl get deployments -n ${{ env.NAMESPACE }}
          kubectl get pods -n ${{ env.NAMESPACE }}
          
          echo "Checking rollout status..."
          kubectl rollout status deployment/identity-svc -n ${{ env.NAMESPACE }} --timeout=5m || true
          kubectl rollout status deployment/ticket-svc -n ${{ env.NAMESPACE }} --timeout=5m || true
          kubectl rollout status deployment/asset-svc -n ${{ env.NAMESPACE }} --timeout=5m || true
          kubectl rollout status deployment/reservation-svc -n ${{ env.NAMESPACE }} --timeout=5m || true
      
      # Post deployment summary
      - name: Deployment Summary
        if: always()
        run: |
          echo "### Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Image Tag:** ${{ steps.vars.outputs.IMAGE_TAG }}" >> $GITHUB_STEP_SUMMARY
          echo "**Namespace:** ${{ env.NAMESPACE }}" >> $GITHUB_STEP_SUMMARY
          echo "**Cluster:** ${{ env.GKE_CLUSTER }}" >> $GITHUB_STEP_SUMMARY
          echo "**Region:** ${{ env.GKE_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Deployed Services" >> $GITHUB_STEP_SUMMARY
          kubectl get deployments -n ${{ env.NAMESPACE }} -o wide >> $GITHUB_STEP_SUMMARY || echo "Failed to get deployments" >> $GITHUB_STEP_SUMMARY

